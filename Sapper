package com.javarush.games.minesweeper;

import com.javarush.engine.cell.Color;
import com.javarush.engine.cell.Game;

import java.util.ArrayList;
import java.util.List;

public class MinesweeperGame extends Game {
    private static final int SIDE = 9;
    private GameObject[][] gameField = new GameObject[SIDE][SIDE];
    private int countMinesOnField;
    private static final String MINE = "UTF - 25"; 
    private static final String FLAG = "\uD83D\uDEA9";  
    private int countFlags;
    private boolean isGameStopped;
    private int countClosedTiles = SIDE *  SIDE;
    private int score;
    
    private void restart(){
       isGameStopped = false;
       countClosedTiles = SIDE * SIDE;
       score = 0;
       setScore(score);
       countMinesOnField = 0;
       createGame();
    }
    
    private void win(){
      isGameStopped = true;
      showMessageDialog(Color.PINK, "Вы выиграли!", Color.WHITE, 70);
        
    }
    
    private void gameOver(){
        showMessageDialog(Color.RED, "Вы проиграли!", Color.BLUE, 70);
        isGameStopped = true;
    }
 
    private void markTile(int x, int y){
         if(!gameField[y][x].isOpen && countFlags > 0 && gameField[y][x].isFlag == false){
           gameField[y][x].isFlag = true;
           countFlags --;
            
           
           setCellValue(x, y, FLAG);
           setCellColor(x, y, Color.WHITE);
      
       }else if(!gameField[y][x].isOpen && gameField[y][x].isFlag == true){
            gameField[y][x].isFlag = false;
            countFlags ++;
            setCellValue(x, y, "");
            setCellColor(x, y, Color.ORANGE);
       }else if(!gameField[y][x].isGameStopped == true){
         
       }
       
    }
    
    public void onMouseRightClick(int x, int y){
        markTile(x, y);
    }
    
     private void openTile(int x, int y){
       if(gameField[y][x].isOpen || gameField[y][x].isFlag || isGameStopped){ return;}
        gameField[y][x].isOpen = true;
        countClosedTiles --;
        setCellColor(x, y, Color.GRAY);
      if(!gameField[y][x].isMine && gameField[y][x].isOpen){
          score += 5; 
          setScore(score);
      }
       if(gameField[y][x].isMine){
         setCellValueEx(x, y, Color.RED, MINE);
              gameOver();
             return;
       } else {setCellNumber(x, y, gameField[y][x].countMineNeighbors);
       }

   if(gameField[y][x].isMine == false && gameField[y][x].countMineNeighbors == 0){
      setCellValue(x, y, "");
      List<GameObject> list = getNeighbors(gameField[y][x]);
      for(int i = 0; i < list.size(); i ++){
          if(!list.get(i).isOpen){
              int xx = list.get(i).x;
              int yy = list.get(i).y;
              openTile(xx, yy);
              
          } 
      }
          if(gameField[y][x].isMine == false && gameField[y][x].countMineNeighbors != 0){
              setCellNumber(x, y, gameField[y][x].countMineNeighbors);
            
          }
          if(countClosedTiles == countMinesOnField){
              win();
             return;
          }

      }
      
   }
      

public void onMouseLeftClick(int x, int y){
     if(isGameStopped){
         restart();
     } else{ 
     openTile(x, y);
     }
     // restart();
      //if(isGameStopped = false){} 
}

      @Override
    public void initialize() {
        setScreenSize(SIDE, SIDE);
        createGame();
    }

    private void createGame() {
        for (int y = 0; y < SIDE; y++) {
            for (int x = 0; x < SIDE; x++) {
                boolean isMine = getRandomNumber(10) < 1;
                if (isMine) {
                    countMinesOnField++;
                }
                gameField[y][x] = new GameObject(x, y, isMine);
                setCellColor(x, y, Color.ORANGE);
                setCellValue(x, y, "");

           }
        }
       countMineNeighbors();
       countFlags = countMinesOnField;
    }

    private List<GameObject> getNeighbors(GameObject gameObject) {
        List<GameObject> result = new ArrayList<>();
        for (int y = gameObject.y - 1; y <= gameObject.y + 1; y++) {
            for (int x = gameObject.x - 1; x <= gameObject.x + 1; x++) {
                if (y < 0 || y >= SIDE) {
                    continue;
                }
                if (x < 0 || x >= SIDE) {
                    continue;
                }
                if (gameField[y][x] == gameObject) {
                    continue;
                }
                result.add(gameField[y][x]);
            }
        }
        return result;
    }
    
    private void countMineNeighbors() {
        List<GameObject> list = new ArrayList<>();
        for(int y = 0; y < SIDE; y ++){
         for(int x = 0; x < SIDE; x ++){
          if(!gameField[y][x].isMine){
              list = getNeighbors(gameField[y][x]);
              for(int i = 0; i < list.size(); i++){
                if(list.get(i).isMine){ 
                gameField[y][x].countMineNeighbors++;
                }
              }
            }  
          }
        
       }    
    }
    
    
}
